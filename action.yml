vname: 'Run Trivy scan - linux - with summary'
author: 'xander-rudolph'
branding:
  icon: 'git-pull-request'
  color: 'green'
description: 'Checks a directory for any vulnerabilities and adds a step summary'
inputs:
  working_dir:
    description: "Working path for scan"
    required: false
    default: .
  severity:
    description: "Severity to flag on"
    required: false
    default: LOW,MEDIUM,HIGH,CRITICAL
  type:
    description: "Type of scan to run"
    required: false
    default: fs

runs:
  using: composite
  steps:
    # https://trivy.dev/v0.18.3/installation/
    - name: Install Trivy
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy

    - name: Run Trivy scan on ${{ inputs.working_dir }}
      shell: bash
      id: scan
      run: | 
        trivy ${{ inputs.type }} ${{ inputs.debug_output }} --scanners vuln,misconfig,secret,license --format json --output "./${{ inputs.working_dir}}-${{ inputs.type }}.json" --severity ${{ inputs.severity}} ${{ inputs.working_dir}}

    - name: Consolidate Report
      shell: pwsh
      run: |
        function ConvertTo-Markdown {
            param(
                [Parameter(ValueFromPipeline)]
                $InputObject
            )
            
            $markdownHeader = @"
        # Trivy Summary`n
        "@
            $markdown = @"
        "@
            ForEach($item in $InputObject.Results)
            {
                $target = $item.Target
                $class = $item.Class
                $type = $item.Type
                $secrets = $item.Secrets
                $vulnerabilities = $item | Select-Object -ExpandProperty Vulnerabilities -ErrorAction SilentlyContinue
        
                if($secrets){
                    If($secrets.Count -eq 0){continue}
                    $markdown += "## Secrets`n<details><summary>Click to expand</summary>`n`n"
                    $markdown += "| Rule | File | Start Line | End Line | Severity | Class | Title | Category |`n"
                    $markdown += "|-|-|-|-|-|-|-|-|`n"
                    
                    foreach ($secret in $secrets) {
                        $line = "| $($secret.RuleID) | $target | $($secret.StartLine) | $($secret.EndLine) | $($secret.Severity) | $class | $($secret.Title) | $($secret.Category) |"
                        $markdown += "$line`n"
                    }
                    $markdown += "`n</detail>`n"
                }
                Else{
                    If($vulnerabilities.Count -eq 0){continue}
                    $markdown += "## Vulnerabilites - $target - $class`n<details><summary>Click to expand</summary>`n`n"
                    $markdown += ""
                    $markdown += "| Item | Type | Current Version | Fixed Version | Severity | CVE ID | Title | Description |`n"
                    $markdown += "|-|-|-|-|-|-|-|-|`n"
                    
                    foreach ($vuln in $vulnerabilities) {
                        # this is needed to not break the MD format in case html format is in the desc
                        $description = ($vuln.Description -replace '<details>' `
                                                   -replace '<summary>', '' `
                                                   -replace '</summary>', '' `
                                                   -replace '</details>', '' `
                                                   -replace '&nbsp;', ' ' `
                                                   -replace '<br\s*/?>', "").trim()
        
                        $line = "| $($vuln.PkgName) | $type | $($vuln.InstalledVersion) | $($vuln.FixedVersion) | $($vuln.Severity) | [$($vuln.VulnerabilityID)]($($vuln.PrimaryURL)) | $($vuln.Title) | <details><summary>Click to expand</summary>$description<br>Additional References:$($vuln.References -join "<br>")</details>|"
                        $markdown += "$line`n"
                    }
                    $markdown += "`n</detail>`n"
                }
            }
            If (-not $markdown){ return "$markdownHeader`nNo Issues Found"}
            return "$markdownHeader`n$markdown"
        }
        (Get-Content "./${{ inputs.working_dir}}-${{ inputs.type }}.json"  | ConvertTo-Markdown)  >> reportssummary.md
        cat reportssummary.md >> $env:GITHUB_STEP_SUMMARY
